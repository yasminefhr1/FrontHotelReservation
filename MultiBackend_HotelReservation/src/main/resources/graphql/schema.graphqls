type Query {
    getReservation(id: ID!): Reservation
    getReservations(page: Int, size: Int, sortBy: String, direction: String): ReservationPage
}

type Mutation {
    createReservation(input: ReservationInput!, chambreIds: [ID!]): Reservation
    updateReservation(id: ID!, input: ReservationInput!, chambreIds: [ID!]): Reservation
    deleteReservation(id: ID!): Boolean
}

type Reservation {
    id: ID
    client: Client!
    chambres: [Chambre!]
    checkInDate: Date
    checkOutDate: Date
}

type Chambre {
    id: ID
    typeChambre: TypeChambre
    prix: Float
    disponible: Boolean
}

type ReservationPage {
    content: [Reservation!]
    pageNumber: Int
    pageSize: Int
    totalElements: Long
    totalPages: Int
    last: Boolean
}

input ReservationInput {
    clientId: ID!
    checkInDate: Date!
    checkOutDate: Date!
}

type Client {
    id: ID
    firstName: String
    lastName: String
    email: String
    phoneNumber: String
}

enum TypeChambre {
    SINGLE,
    DOUBLE,
    TWIN,
    SUITE,
    DELUXE,
    FAMILY,
    PRESIDENTIAL,
    STUDIO,
    CONNECTING,
    ACCESSIBLE,
    PENTHOUSE,
    CABANA,
    BUNGALOW,
    VILLA,
    ECONOMY
}

scalar Date
scalar Long